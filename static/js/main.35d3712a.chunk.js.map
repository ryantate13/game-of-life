{"version":3,"sources":["Header.module.scss","App.module.scss","Game.module.scss","Logo.tsx","Header.tsx","Game.tsx","App.tsx","useDispatch.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","rows","replace","split","pixel_size","length","Logo","viewBox","map","row","i","pixel","j","key","width","height","x","y","fill","trim","strokeWidth","stroke","Header","generation","frames_per_second","paused","dispatch","fill_rate","className","style","panel","h1","controls","disabled","onClick","type","title","role","aria-label","value","onChange","target","Number","Array","_","filter","min","max","step","GLIDER","init","coordinates","Set","max_y","max_x","add","toString","to_xy","c","neighbors","neighbs","Math","_x","_y","push","Game","dimensions","cells","alive","dying","zoom","container_ref","useRef","useEffect","ref","current","getBoundingClientRect","dispatch_dimensions","canvas_ref","canvas","ctx","getContext","fill_with","color","fillStyle","fillRect","size","draw_canvas","styles","board","initial_state","animation_id","reducer","state","event","schedule","setTimeout","clearTimeout","random","requestAnimationFrame","new_cells","reduce","a","has","dead","dead_cell","n","d","delete","floor","console","error","App","useState","setState","current_state","useDispatch","Object","assign","window","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,SAAW,2B,kBCA3DD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,sB,8JCC1B,IAYIC,EAZS,mIAWVC,QAAQ,MAAO,IAAIA,QAAQ,MAAO,IACrBC,MAAM,MAOlBC,EADY,IACaH,EAAKI,OAE3B,SAASC,IACZ,OAAO,yBAAKC,QAAO,cAJP,IAIO,YAJP,MAKPN,EAAKO,KAAI,SAACC,EAAKC,GAAN,OAAYD,EAAIN,MAAM,IAAIK,KAAI,SAACG,EAAOC,GAAR,OAAc,yBAAU,CAC5DC,IAAI,GAAD,OAAKH,GAAL,OAASE,GACZE,MAAOV,EACPW,OAAQX,EACRY,EAAGJ,EAAIR,EACPa,EAAGP,EAAIN,EACPc,KAAMP,EAAMQ,OAdZ,OADE,OAgBFC,YAbM,EAcNC,OAfC,4B,oBCJN,SAASC,EAAT,GAAsF,IAArEC,EAAoE,EAApEA,WAAYC,EAAwD,EAAxDA,kBAAmBC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,UACrE,OAAO,yBAAKC,UAAWC,IAAMC,OACzB,kBAACxB,EAAD,MACA,wBAAIsB,UAAWC,IAAME,IAArB,gBACA,yBAAKH,UAAWC,IAAMG,UAClB,uCAEI,4BAAQC,UAAWR,EAAQS,QAAS,kBAAMR,EAAS,CAACS,KAAM,UAAUC,MAAO,SACvE,0BAAMC,KAAM,MAAOC,aAAY,QAA/B,UADJ,UAGA,4BAAQL,SAAUR,EAAQS,QAAS,kBAAMR,EAAS,CAACS,KAAM,WAAWC,MAAO,SACvE,0BAAMC,KAAM,MAAOC,aAAY,SAA/B,UADJ,UAGA,4BAAQL,UAAWR,EAAQS,QAAS,kBAAMR,EAAS,CAACS,KAAM,YAAYC,MAAO,yBACzE,0BAAMC,KAAM,MAAOC,aAAY,UAA/B,UADJ,WAIJ,gDAEI,4BACIC,MAAOf,EACPgB,SAAU,gBAAWD,EAAX,EAAEE,OAASF,MAAX,OAAuBb,EAAS,CACtCS,KAAM,oBACNI,MAAOG,OAAOH,OAIdI,MAAM,IACDzB,KAAK,MACLV,KAAI,SAACoC,EAAGlC,GAAJ,OAAUA,EAAI,KAClBmC,QAAO,SAAAnC,GAAC,QAAM,GAAKA,MACnBF,KAAI,SAAAE,GAAC,OAAI,4BAAQG,IAAKH,GAAIA,QAI3C,2CAAiBa,GACjB,yCACeI,EADf,IAEI,2BACIM,UAAWR,EACXU,KAAM,QACNW,IAAK,GACLC,IAAK,IACLC,KAAM,GACNT,MAAOZ,EACPa,SAAU,gBAAWD,EAAX,EAAEE,OAASF,MAAX,OAAuBb,EAAS,CAACS,KAAM,YAAaI,MAAOG,OAAOH,W,2BCtDnFU,EAAmB,CAC5B,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,iCACA,iCACA,2CACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,6BAGG,SAASC,EAAT,GAIH,IAJiE,IAA/CpC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,OACnBoC,EAAc,IAAIC,IACpBC,EAAQJ,EAAO5C,OACfiD,EAAQL,EAAO,GAAG5C,OACdY,EAAI,EAAGA,EAAIF,IAAUE,EACzB,IAAI,IAAID,EAAI,EAAGA,EAAIF,IAASE,EACrBiC,EAAOhC,EAAIoC,GAAOrC,EAAIsC,GAAOnC,QAC5BgC,EAAYI,IAAI,CAACvC,EAAEC,GAAGuC,YAClC,OAAOL,EAYJ,SAASM,EAAMC,GAClB,OAAOA,EAAEvD,MAAM,KAAKK,IAAIkC,QAGrB,SAASiB,EAAU3C,EAAWC,EAAWH,EAAeC,GAI3D,IAHA,IAAM6C,EAAgB,GAClBN,EAAQO,KAAKf,IAAI9B,EAAI,EAAGF,EAAQ,GAChCuC,EAAQQ,KAAKf,IAAI7B,EAAI,EAAGF,EAAS,GAC5B+C,EAAKD,KAAKd,IAAI,EAAG/B,EAAI,GAAI8C,GAAMR,IAASQ,EAC7C,IAAK,IAAIC,EAAKF,KAAKd,IAAI,EAAG9B,EAAI,GAAI8C,GAAMV,IAASU,EACvCD,IAAO9C,GAAK+C,IAAO9C,GACrB2C,EAAQI,KAAK,CAACF,EAAIC,IAC9B,OAAOH,EAoEJ,SAASK,EAAT,GAA4F,IAA7EvC,EAA4E,EAA5EA,SAA4E,IAAlEwC,WAAanD,EAAqD,EAArDA,OAAQD,EAA6C,EAA7CA,MAA6C,IAArCqD,MAAQC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,KAC1EC,EAAgBC,iBAAO,MAC7BC,qBAAU,YAxCP,SAA6BC,EAAoDhD,GACpF,GAAIgD,GAAOA,EAAIC,QAAS,CAAC,IAAD,EACKD,EAAIC,QAAsCC,wBAA5D9D,EADa,EACbA,MACPY,EAAS,CACLS,KAAM,aACNpB,OAJgB,EACNA,OAIVD,WAmCJ+D,CAAoBN,EAAe7C,KAEpC,CAAC6C,IAEJ,IAAMO,EAA+DN,iBAAO,MAK5E,OAJAC,qBAAU,YAnCP,SACHM,EACAjE,EACAC,EACAqD,EACAC,GAEA,GAAIU,GAAUA,EAAOJ,QAAS,CAC1B,IAAMK,EAAOD,EAAOJ,QAAyCM,WAAW,MACpEC,EAAY,SAACC,EAA0BhC,GACnC6B,EAAII,UAAYD,EAD2D,oBAElDhC,GAFkD,IAE3E,2BAAsC,CAAC,IAAD,EACnBM,EADmB,4BAC3BzC,EAD2B,KACxBC,EADwB,KAElC+D,EAAIK,SAASrE,EAAGC,EAAG,EAAG,IAJiD,gCAO9EmD,EAAMkB,MAASjB,EAAMiB,MAKtBJ,EAAU,QAASb,GACnBa,EAAU,QAASd,KALnBY,EAAII,UAAY,QAChBJ,EAAIK,SAAS,EAAG,EAAGvE,EAAOC,KAkB9BwE,CAAYT,EAAYhE,EAAOC,EAAQqD,EAAOC,KAC/C,CAACS,EAAYhE,EAAOC,EAAQqD,EAAOC,IAE/B,yBAAKzC,UAAW4D,IAAOC,MAAOf,IAAKH,GACtC,0CAAQG,IAAKI,GAAgB,CAAC/D,SAAQD,SAAtC,CAA8Ce,MAAO,CAACyC,YC1EvD,IAAMoB,EAAgB,CACzBnE,WAAY,EACZC,kBAAmB,GACnBG,UAAW,GACXF,QAAQ,EACRkE,aAAc,EACdzB,WAAY,CACRnD,OAAQ,EACRD,MAAO,GAEXqD,MAAO,CACHC,MAAO,IAAIhB,IAAI,IACfiB,MAAO,IAAIjB,IAAI,KAEnBkB,KAAM,GAGH,SAASsB,EAAQC,EAAiBC,EAAcpE,GACnD,IAAMqE,EAAW,WACRF,EAAMpE,SACPoE,EAAMF,aAAeK,YAAW,kBAAMtE,EAAS,CAACS,KAAM,eAAc,IAAO0D,EAAMrE,qBAEzF,OAAQsE,EAAM3D,MACV,IAAK,YACD0D,EAAMlE,UAAYmE,EAAMvD,MACxB,MACJ,IAAK,oBACDsD,EAAMrE,kBAAoBsE,EAAMvD,MAChC,MACJ,IAAK,OACDsD,EAAMpE,QAAS,EACfsE,IACA,MACJ,IAAK,QACDF,EAAMpE,QAAS,EACfwE,aAAaJ,EAAMF,cACnBE,EAAMF,aAAe,EACrB,MACJ,IAAK,SACDE,EAAMtE,WAAamE,EAAcnE,WAEjC,IADA,IAAM4C,EAAQ,IAAIf,IACTpC,EAAI,EAAGA,EAAI6E,EAAM3B,WAAWpD,QAASE,EAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAI4E,EAAM3B,WAAWnD,SAAUE,EACvC4C,KAAKqC,SAAW,EAAIL,EAAMlE,UAAY,KACtCwC,EAAMZ,IAAI,CAACvC,EAAGC,GAAGuC,YAC7BqC,EAAM1B,MAAME,MAAQ,IAAIjB,IACxByC,EAAM1B,MAAMC,MAAQ,IAAIhB,IACxB+C,uBAAsB,kBAAMzE,EAAS,CAACS,KAAM,QAASgC,aACrD,MACJ,IAAK,QACD0B,EAAM1B,MAAMC,MAAQ0B,EAAM3B,MAC1B,MACJ,IAAK,WAEG0B,EAAM1B,MAAMC,MAAMkB,SAChBO,EAAMtE,WACRsE,EAAM1B,MD5Df,SAAoBA,EAAyBrD,EAAeC,GAC/D,IADsF,EAChFsD,EAAQ,IAAIjB,IACdgD,EAAY,IAAIhD,IAFkE,cAGtEe,GAHsE,IAGtF,2BAAuB,CAAC,IAAD,EAAZT,EAAY,UACJD,EAAMC,GADF,qBAEDC,EAFC,UAEe7C,EAAOC,GACTsF,QAAO,SAACC,EAAgC5C,GAEhE,OADA4C,EAAEnC,EAAMoC,IAAI7C,EAAEF,YAAc,QAAU,QAAQQ,KAAKN,GAC5C4C,IACR,CAACE,KAAM,GAAIpC,MAAO,KAHpBA,EAHc,EAGdA,MAAOoC,EAHO,EAGPA,KAHO,cAOKA,GAPL,IAOnB,2BAA8B,CAAC,IAApBC,EAAmB,QAGI,IAFP9C,EAAU8C,EAAU,GAAIA,EAAU,GAAI3F,EAAOC,GAC/D8B,QAAO,SAAA6D,GAAC,OAAIvC,EAAMoC,IAAIG,EAAElD,eACVnD,QACf+F,EAAU7C,IAAIkD,EAAUjD,aAXb,8BAaE,IAAjBY,EAAM/D,QAAiC,IAAjB+D,EAAM/D,QAC5BgE,EAAMd,IAAIG,IAjBoE,kDAoBtEW,GApBsE,IAoBtF,gCAAWsC,EAAX,QACIxC,EAAMyC,OAAOD,IArBqE,kDAsBtEP,GAtBsE,IAsBtF,gCAAWM,EAAX,QACIvC,EAAMZ,IAAImD,IAvBwE,8BAwBtF,MAAO,CAACtC,MAAOD,EAAOE,SCoCI9C,CAAWsE,EAAM1B,MAAMC,MAAOyB,EAAM3B,WAAWpD,MAAO+E,EAAM3B,WAAWnD,QACrFgF,KAEJ,MACJ,IAAK,aACDF,EAAM3B,WAAWnD,OAAS8C,KAAKgD,MAAMf,EAAM/E,OAAS8E,EAAMvB,MAC1DuB,EAAM3B,WAAWpD,MAAQ+C,KAAKgD,MAAMf,EAAMhF,MAAQ+E,EAAMvB,MACxD6B,uBAAsB,kBAAMzE,EAAS,CAACS,KAAM,QAASgC,MAAOjB,EAAK2C,EAAM3B,iBACvE,MACJ,QACI4C,QAAQC,MAAM,uBAAwB,CAACjB,QAAOD,UAEtD,OAAO,eAAIA,GAGR,SAASmB,IAAO,IAAD,EC1If,SAA2BtB,EAAkBE,GAA6C,IAAD,EAClEqB,mBAAYvB,GADsD,mBACrFG,EADqF,KAC9EqB,EAD8E,KAK5F,MAAO,CAACrB,EAHR,SAASnE,EAASoE,GACdoB,GAAS,SAAAC,GAAa,OAAIvB,EAAQuB,EAAerB,EAAOpE,QDwIlC0F,CAA6B1B,EAAeE,GADpD,mBACXC,EADW,KACJnE,EADI,KAGlB,OADA2F,OAAOC,OAAOC,OAAQ,CAAC1B,QAAOnE,aACvB,yBAAKE,UAAW4D,IAAOwB,KAC1B,kBAAC1F,EAAD,CACII,SAAUA,EACVH,WAAYsE,EAAMtE,WAClBC,kBAAmBqE,EAAMrE,kBACzBC,OAAQoE,EAAMpE,OACdE,UAAWkE,EAAMlE,YAErB,kBAACsC,EAAD,CACIvC,SAAUA,EACVwC,WAAY2B,EAAM3B,WAClBC,MAAO0B,EAAM1B,MACbG,KAAMuB,EAAMvB,QElJxB,IAAMkD,EAAcC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,YAI1B3B,QAAQ4B,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBtB,QAAQ4B,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAA9B,GACLD,QAAQC,MAAM,4CAA6CA,M,MClGjE+B,IAASC,OAAO,kBAAC/B,EAAD,MAAQgC,SAASC,eAAe,SDqBzC,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,gBACA5B,OAAOG,SAAS0B,MAEJC,SAAW9B,OAAOG,SAAS2B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,gBAAN,sBAEP3B,IAgEV,SAAiCM,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BZ,OAAOG,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL/B,QAAQ4B,IACN,oEAvFAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCrB,QAAQ4B,IACN,iHAMJb,EAAgBC,EAAOC,OClD/BE,K","file":"static/js/main.35d3712a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"Header_panel__2qOlC\",\"controls\":\"Header_controls__1AkqJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Game_board__io3jt\"};","import React from 'react';\n\nconst logo = `#\n          \n          \n          \n      **  \n  **** ** \n  ******  \n   ****   \n          \n          \n              \n#`.replace('#\\n', '').replace('\\n#', ''),\n    rows = logo.split('\\n');\n\nconst white = '#fff',\n    black = '#000',\n    stroke = 'rgba(0,0,0,0.75)',\n    strokeWidth = 1,\n    dimension = 250,\n    pixel_size = dimension / rows.length;\n\nexport function Logo() {\n    return <svg viewBox={`0 0 ${dimension} ${dimension}`}>\n        {rows.map((row, i) => row.split('').map((pixel, j) => <rect {...{\n            key: `${i}${j}`,\n            width: pixel_size,\n            height: pixel_size,\n            x: j * pixel_size,\n            y: i * pixel_size,\n            fill: pixel.trim() ? black : white,\n            strokeWidth,\n            stroke,\n        }}/>))}\n    </svg>;\n}\n","import React from 'react';\nimport {Event} from './App';\nimport {Dispatcher} from './useDispatch';\nimport {Logo} from './Logo';\nimport style from './Header.module.scss';\n\nexport type Props = {\n    dispatch: Dispatcher<Event>;\n    generation: number;\n    frames_per_second: number;\n    paused: boolean;\n    fill_rate: number;\n};\n\nexport function Header({generation, frames_per_second, paused, dispatch, fill_rate}: Props) {\n    return <div className={style.panel}>\n        <Logo/>\n        <h1 className={style.h1}>Game of Life</h1>\n        <div className={style.controls}>\n            <h4>\n                Controls\n                <button disabled={!paused} onClick={() => dispatch({type: 'play'})} title={'Start'}>\n                    <span role={'img'} aria-label={'play'}>▶</span>️\n                </button>\n                <button disabled={paused} onClick={() => dispatch({type: 'pause'})} title={'Pause'}>\n                    <span role={'img'} aria-label={'pause'}>⏸</span>️\n                </button>\n                <button disabled={!paused} onClick={() => dispatch({type: 'random'})} title={'Generate Random Board'}>\n                    <span role={'img'} aria-label={'random'}>↻</span>️\n                </button>\n            </h4>\n            <h4>\n                Frames Per Second\n                <select\n                    value={frames_per_second}\n                    onChange={({target: {value}}) => dispatch({\n                        type: 'frames_per_second',\n                        value: Number(value),\n                    })}\n                >\n                    {\n                        Array(60)\n                            .fill(null)\n                            .map((_, i) => i + 1)\n                            .filter(i => !(60 % i))\n                            .map(i => <option key={i}>{i}</option>)\n                    }\n                </select>\n            </h4>\n            <h4>Generation: {generation}</h4>\n            <h4>\n                Fill Rate {fill_rate}%\n                <input\n                    disabled={!paused}\n                    type={'range'}\n                    min={10}\n                    max={100}\n                    step={10}\n                    value={fill_rate}\n                    onChange={({target: {value}}) => dispatch({type: 'fill_rate', value: Number(value)})}\n                />\n            </h4>\n        </div>\n    </div>;\n}\n","import React, {useEffect, useRef} from 'react';\nimport styles from './Game.module.scss';\nimport {Event, Cells, Dimensions, Coordinates} from './App';\nimport {Dispatcher} from './useDispatch';\n\nexport const GLIDER: string[] = [\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '            ■            ',\n    '             ■           ',\n    '           ■■■           ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n    '                         ',\n];\n\nexport function init({width, height}: Dimensions): Set<Coordinates> {\n    const coordinates = new Set<Coordinates>(),\n        max_y = GLIDER.length,\n        max_x = GLIDER[0].length;\n    for(let y = 0; y < height; ++y)\n        for(let x = 0; x < width; ++x)\n            if(GLIDER[y % max_y][x % max_x].trim())\n                coordinates.add([x,y].toString());\n    return coordinates;\n}\n\ntype Props = {\n    dispatch: Dispatcher<Event>;\n    dimensions: Dimensions;\n    cells: Cells;\n    zoom: number;\n}\n\ntype XY = [number, number];\n\nexport function to_xy(c: Coordinates): XY {\n    return c.split(',').map(Number) as XY;\n}\n\nexport function neighbors(x: number, y: number, width: number, height: number): XY[] {\n    const neighbs: XY[] = [],\n        max_x = Math.min(x + 1, width - 1),\n        max_y = Math.min(y + 1, height - 1);\n    for (let _x = Math.max(0, x - 1); _x <= max_x; ++_x)\n        for (let _y = Math.max(0, y - 1); _y <= max_y; ++_y)\n            if (!(_x === x && _y === y))\n                neighbs.push([_x, _y]);\n    return neighbs;\n}\n\nexport function generation(cells: Set<Coordinates>, width: number, height: number): Cells {\n    const dying = new Set<string>(),\n        new_cells = new Set<string>();\n    for (const c of cells) {\n        const [x, y] = to_xy(c),\n            surrounding = neighbors(x, y, width, height),\n            {alive, dead} = surrounding.reduce((a: { dead: XY[], alive: XY[] }, c: XY) => {\n                a[cells.has(c.toString()) ? 'alive' : 'dead'].push(c);\n                return a;\n            }, {dead: [], alive: []});\n        for (const dead_cell of dead) {\n            const live_neighbors = neighbors(dead_cell[0], dead_cell[1], width, height)\n                .filter(n => cells.has(n.toString()));\n            if (live_neighbors.length === 3)\n                new_cells.add(dead_cell.toString());\n        }\n        if (alive.length !== 2 && alive.length !== 3) {\n            dying.add(c);\n        }\n    }\n    for (const d of dying)\n        cells.delete(d);\n    for (const n of new_cells)\n        cells.add(n);\n    return {alive: cells, dying};\n}\n\nexport function dispatch_dimensions(ref: React.MutableRefObject<HTMLDivElement | null>, dispatch: Dispatcher<Event>) {\n    if (ref && ref.current) {\n        const {width, height} = (ref.current as unknown as HTMLDivElement).getBoundingClientRect();\n        dispatch({\n            type: 'dimensions',\n            height,\n            width,\n        });\n    }\n}\n\nexport function draw_canvas(\n    canvas: React.MutableRefObject<HTMLCanvasElement | null>,\n    width: number,\n    height: number,\n    alive: Set<Coordinates>,\n    dying: Set<Coordinates>\n) {\n    if (canvas && canvas.current) {\n        const ctx = (canvas.current as unknown as HTMLCanvasElement).getContext('2d') as CanvasRenderingContext2D,\n            fill_with = (color: 'white' | 'black', coordinates: Set<Coordinates>): void => {\n                ctx.fillStyle = color;\n                for (const coordinate of coordinates) {\n                    const [x, y] = to_xy(coordinate);\n                    ctx.fillRect(x, y, 1, 1);\n                }\n            };\n        if (!alive.size && !dying.size) {\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, width, height);\n        }\n        else {\n            fill_with('white', dying);\n            fill_with('black', alive);\n        }\n    }\n}\n\nexport function Game({dispatch, dimensions: {height, width}, cells: {alive, dying}, zoom}: Props) {\n    const container_ref = useRef(null);\n    useEffect(() => {\n        dispatch_dimensions(container_ref, dispatch);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [container_ref]);\n\n    const canvas_ref: React.MutableRefObject<HTMLCanvasElement | null> = useRef(null);\n    useEffect(() => {\n        draw_canvas(canvas_ref, width, height, alive, dying);\n    }, [canvas_ref, width, height, alive, dying]);\n\n    return <div className={styles.board} ref={container_ref}>\n        <canvas ref={canvas_ref} {...{height, width}} style={{zoom}}/>\n    </div>;\n}\n","import React from 'react';\nimport styles from './App.module.scss';\nimport {useDispatch, Dispatcher} from './useDispatch';\nimport {Header} from './Header';\nimport {Game, generation, init} from './Game';\n\ntype FPS = {\n    type: 'frames_per_second';\n    value: number;\n}\n\ntype FillRate = {\n    type: 'fill_rate';\n    value: number;\n};\n\ntype Play = {\n    type: 'play';\n}\n\ntype Pause = {\n    type: 'pause';\n};\n\ntype Random = {\n    type: 'random';\n};\n\ntype StartAnimation = {\n    type: 'start_animation';\n};\n\ntype Generate = {\n    type: 'generate';\n}\n\ntype GameDimensions = {\n    type: 'dimensions';\n    height: number;\n    width: number;\n};\n\ntype ApplyCells = {\n    type: 'cells';\n    cells: Set<Coordinates>;\n};\n\nexport type Event = FPS | FillRate | Play | Pause | Random | StartAnimation | Generate | GameDimensions | ApplyCells;\n\nexport type Dimensions = {\n    height: number;\n    width: number;\n};\n\nexport type Coordinates = string;\n\nexport type Cells = {\n    alive: Set<Coordinates>;\n    dying: Set<Coordinates>;\n};\n\nexport type AppState = {\n    generation: number;\n    frames_per_second: number;\n    fill_rate: number;\n    paused: boolean;\n    animation_id: NodeJS.Timeout | number;\n    dimensions: Dimensions;\n    cells: Cells;\n    zoom: number;\n};\n\nexport const initial_state = {\n    generation: 0,\n    frames_per_second: 60,\n    fill_rate: 10,\n    paused: true,\n    animation_id: 0,\n    dimensions: {\n        height: 0,\n        width: 0,\n    },\n    cells: {\n        alive: new Set([]),\n        dying: new Set([]),\n    },\n    zoom: 5,\n};\n\nexport function reducer(state: AppState, event: Event, dispatch: Dispatcher<Event>): AppState {\n    const schedule = () => {\n        if (!state.paused)\n            state.animation_id = setTimeout(() => dispatch({type: 'generate'}), 1000 / state.frames_per_second);\n    };\n    switch (event.type) {\n        case 'fill_rate':\n            state.fill_rate = event.value;\n            break;\n        case 'frames_per_second':\n            state.frames_per_second = event.value;\n            break;\n        case 'play':\n            state.paused = false;\n            schedule();\n            break;\n        case 'pause':\n            state.paused = true;\n            clearTimeout(state.animation_id as NodeJS.Timeout);\n            state.animation_id = 0;\n            break;\n        case 'random':\n            state.generation = initial_state.generation;\n            const cells = new Set<string>();\n            for (let x = 0; x < state.dimensions.width; ++x)\n                for (let y = 0; y < state.dimensions.height; ++y)\n                    if (Math.random() > 1 - state.fill_rate / 100)\n                        cells.add([x, y].toString());\n            state.cells.dying = new Set();\n            state.cells.alive = new Set();\n            requestAnimationFrame(() => dispatch({type: 'cells', cells}));\n            break;\n        case 'cells':\n            state.cells.alive = event.cells;\n            break;\n        case 'generate':\n            // stop processing generations if the board is dead\n            if (state.cells.alive.size) {\n                ++state.generation;\n                state.cells = generation(state.cells.alive, state.dimensions.width, state.dimensions.height);\n                schedule();\n            }\n            break;\n        case 'dimensions':\n            state.dimensions.height = Math.floor(event.height / state.zoom);\n            state.dimensions.width = Math.floor(event.width / state.zoom);\n            requestAnimationFrame(() => dispatch({type: 'cells', cells: init(state.dimensions)}));\n            break;\n        default:\n            console.error('unmatched event type', {event, state});\n    }\n    return {...state};\n}\n\nexport function App() {\n    const [state, dispatch] = useDispatch<AppState, Event>(initial_state, reducer);\n    Object.assign(window, {state, dispatch});\n    return <div className={styles.App}>\n        <Header\n            dispatch={dispatch}\n            generation={state.generation}\n            frames_per_second={state.frames_per_second}\n            paused={state.paused}\n            fill_rate={state.fill_rate}\n        />\n        <Game\n            dispatch={dispatch}\n            dimensions={state.dimensions}\n            cells={state.cells}\n            zoom={state.zoom}\n        />\n    </div>;\n}\n","import {useState} from 'react';\n\nexport type Reducer<S, E> = (state: S, event: E, dispatch: Dispatcher<E>) => S;\nexport type Dispatcher<E> = (event: E) => void;\n\nexport function useDispatch<S, E>(initial_state: S, reducer: Reducer<S, E>): [S, Dispatcher<E>] {\n    const [state, setState] = useState<S>(initial_state);\n    function dispatch(event: E){\n        setState(current_state => reducer(current_state, event, dispatch));\n    }\n    return [state, dispatch];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}